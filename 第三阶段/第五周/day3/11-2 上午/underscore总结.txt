iterate       迭代，反复执行某一段代码
	之所不称为循环，是因使用iterate
	时看不到循环语句（for、while...），
                 但它内部就是，一个循环

iteratee     被迭代，被反复执行的一个函数
	通常会接收一个或数个参数，返回
                  一个加工后的值。

使用迭代的目的：将每一次循环要执行的代码（iteratee）
                 与循环整体分离开。iteratee通常与业务
                 逻辑相关，循环整体通常与业务逻辑无关
                 通常是可以共用的算法。


predicate          谓语、谓词、断言
	是一个特殊的iteratee，predicate的返回值
                  是一个boolean值。算法中有一种基本的
	业务需求，即判定某个数据是否符合条件，
	这种判定属于业务逻辑，只能交给外面去
	实现


相等判断	
	==	会进行隐式类型转换，会使2个值尽可能相等
	===	不会进行类型转换，很严格
	自己实现一个equals方法		自定义相等逻辑

对象相等
	引用相等	两个变量指向的是同一个对象
	值相等		两个变量可以指向不同的对象
			但是两个对象的属性个数相同
			且属性的值都相等


context		上下文
		JS中特有的概念，上下文指函数中的this
		指向的对象

立即调用函数		立即调用的匿名函数
			在定义函数的同时就调用这个函数
			function add(a,b){return a+b}
			alert(add(3,5))
			alert((function(a,b){return a+b})(3,5))
			懒，不想给函数起名字



非侵入式库	不会对全局作用域和原生JS对象以及DOM对象
		进行“篡改”的脚本库
		jquery中的所有方法全部都在$中
		underscore中的所有方法都在_中
		
 		它们都提供noConflict方法，可以使
		jquery或underscore让出$或_
		如果jquery先导入，调用noConflict则$处
		于完全让出的状态
		如果其它脚本先占用了$，再引入jquery
		jquery会将$重新定义为jquery并保留$
		的原定义，这时再调用noConflict，jquery
		会将$恢复成原定义


		
链式调用	underscore支持链式调用和非链式调用2种写法
		jquery默认使用链式语法
		underscore大多数方法都是计算-返回结果类型
		支持非链式语法可以让简单调用更直观（直接）
		支持链式语法可以让复杂调用更简单
		jquery的大多数方法都是直接操作类型，不需
		要返回结果
		链式语法的好处是减少变量的使用，减少赋
		值语句的使用



		



