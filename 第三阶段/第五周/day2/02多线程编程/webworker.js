//斐波那契数列
//f(0)=0,f(1)=1 f(n)=f(n-1)+f(n-2)

//function f(n){
//    console.log('方法被调用了'+n)
//    if(n<2)return n
//    return f(n-1)+f(n-2)
//}
//f(2)

//JavaScript本身是单线程的(同一时间内只能做一件事)
//如果这件事情很耗时，就会造成页面卡死(线程阻塞)，需要使用异步编程或者多线程编程，避免线程阻塞

//多线程中的概念：程序：写的代码，静态的概念
//进程：运行起来的程序，动态的概念
//线程：进程中一条执行路径
//主线程:程序运行起来具有的这个线程叫做主线程，主线程在程序运行期间一直存在，一般用来处理用户的操作以及页面的刷新
//分线程(子线程)：自己新建的一个线程，一般用来进行耗时的操作，操作结束，线程自动销毁


//注意：分线程不能刷新修改页面
//创建一个worker对象，这也是HTML5里的新特性：多线程编程
//参数是一个js文件的路径，内部会开辟一个分线程，在分线程中执行worker.js中的内容，该js中进行耗时的操作
var worker = new Worker('worker.js')
//接收分线程中的数据
worker.onmessage = function(ev){
    alert(ev.data)
    //终止worker(内部销毁分线程)
    worker.terminate()
}

//向worker发消息
worker.postMessage(30)


